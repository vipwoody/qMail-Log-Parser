/**
 * Folder v1.01
 * Log Reader superClass class
 * logReader.java v1.05
 * @author Ryan
 * 
 */

import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.Scanner;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.util.Calendar;
import java.io.EOFException;
public class logReader extends Thread{
	/*SCANNER TO READ LOG*/
	protected Scanner scan;
	/*contains fis of log*/
	protected FileInputStream fis;
	/*contains fos off error*/
	protected FileOutputStream errFos;
	/*prints to error log*/
	protected PrintWriter errWriter;
	/*COUTNS # of error*/
	protected long errcntr;
	/*COUNTS # lines*/
	protected long linecntr;
	/*contains filename of log to read from*/
	protected String fileName;
	/*contains name of childs calling readFile*/
	private String readerName;
	private boolean dumpSpam=false;
	private boolean dumpQmail=false;
	private boolean dumpSmtpd=false;
	private static String globalLine;
	private static Thread thread;
	public enum month{january,february,march,april,may,june,july,august,september,october,november,december};

	/**
	 * default constructor for logReader
	 * @param f
	 */
	public logReader(String f, String name){
		fileName=f;
		readerName=name;
		try{
			errFos=new FileOutputStream(globalClass.log_error,true);
			errWriter=new PrintWriter(errFos,true);
		}
		catch(FileNotFoundException e){
			System.out.println("error file was not found...");
		}

	}
	/**
	 * sets fileName
	 * @param f
	 */
	public void setFileName(String f){
		/*SETS FILENAME*/
		fileName=f;
	}
	/**
	 * 
	 * @return fileName
	 */
	public String getfileName(){
		String temp=fileName;
		return temp;
	}
	/*OVERWRITE THIS METHOD*/
	public void parseLine(String s) throws unknownLineException{}
	public void run(){
		try{
			parseLine(globalLine);
		}
		catch(unknownLineException e){
			writeError(linecntr,readerName,false); //line error #, reader index, false for not end
		}
	}
	/**
	 * reads file and process
	 */
	public void readFile(){
		/*Contains log directory*/
		String fName=fileName;
		/*TRIES to set all and read*/
		linecntr=0;
		if (readerName.equals("spamReader"))
			thread=new spamReader();
		else if (readerName.equals("smtpdReader"))
			thread=new smtpdReader();
		else if (readerName.equals("AVReader"))
			thread=new AVReader();
		else if (readerName.equals("qmailReader"))
			thread=new qmailReader();
		else{
			System.out.println("UNKNOWN READER...");
			System.exit(0);
		}
		//Thread thread =new logReader(fileName,readerName);
		try{
			
			fis=new FileInputStream(fName);
			scan=new Scanner(fis);
			while(scan.hasNext() && linecntr<1200000){
				if ((Runtime.getRuntime().freeMemory()/1048576)>=200)
					if (!confirmSelection(readerName))
						break;
					else
						System.out.println("Continuing read of log...");
				System.out.println(linecntr);	
				linecntr++;
				//System.out.println(linecntr);
				//parseLine(scan.nextLine());
				globalLine=scan.nextLine();
				thread.run();
			}	
		}
		catch(FileNotFoundException e){
			System.out.println("File was not found\texiting...");
			System.exit(0);
		}
		finally{
			writeError(0,readerName,true); //line error #, reader index, true for end
			scan.close();
			errWriter.close();
			if (dumpSpam)
				readDump(0);
			if (dumpQmail)
				readDump(1);
			if (dumpSmtpd)
				readDump(2);
		}
	}
	public void readDump(int a){
		ObjectInputStream ois=null;
		switch (a){
		//spam
		case 0:
			dumpIt("spam");
			try{
				ois=new ObjectInputStream(new FileInputStream(globalClass.dump_spam));
				try{
					while (true){
						globalClass.hashOfMessageInput.addToHashTable((messageInput)ois.readObject());
					}
				}
				catch(EOFException e){
					System.out.println("Done reading dump!");
				}
				catch(ClassNotFoundException e){
					System.out.println("An error has occured...");
					System.exit(0);
				}
			}
			catch(IOException e){
				System.out.println("An error has occured..");
				System.exit(0);
			}
			break;
		//qmail
		case 1:
			dumpIt("qmail");
			try{
				ois=new ObjectInputStream(new FileInputStream(globalClass.dump_qmail));
				try{
					while (true){
						globalClass.hashOfMessageOutput.addToHashTable((messageOutput)ois.readObject());
					}
				}
				catch(EOFException e){
					System.out.println("Done reading dump!");
				}
				catch(ClassNotFoundException e){
					System.out.println("An error has occured...");
					System.exit(0);
				}
			}
			catch(IOException e){
				System.out.println("An error has occured..");
				System.exit(0);
			}
			break;
		//smtpd
		case 2:
			dumpIt("smtpd");
			try{
				ois=new ObjectInputStream(new FileInputStream(globalClass.dump_smtpd));
				try{
					while (true){
						globalClass.hashOfSmtpdInputs.addToHashTable((smtpdInput)ois.readObject());
					}
				}
				catch(EOFException e){
					System.out.println("Done reading dump!");
				}
				catch(ClassNotFoundException e){
					System.out.println("An error has occured...");
					System.exit(0);
				}
			}
			catch(IOException e){
				System.out.println("An error has occured..");
				System.exit(0);
			}
			break;
		}
	}
	/**
	 * WRITES TO ERROR LOG in log directory
	 * @param a
	 * @param b
	 * @param t
	 */
	
	public boolean confirmSelection(String readerN){
		Scanner kb=new Scanner(System.in);
		String ans;		
		System.out.println("WARNING! - CURRENT LOG HAS EXCEEDED HEAP MEMORY ALLOCATED...["+Runtime.getRuntime().freeMemory()/1048576+"]");
		System.out.println("Do you want to continue reading this file...\nWARNING! - THIS OPERATION CAN TAKE SEVERAL " +
				"MINUTES...");
		ans=kb.next().toLowerCase();
		if (ans.charAt(0)=='y'){
			dumpIt(readerN);
			return true;
		}
		System.out.println("WARNING! - NOT ALL LOG HAS BEEN PARSED!");
		return false;
	}
	public void dumpIt(String rd){
		int cntr=0;
		ObjectOutputStream oos=null;
		System.out.println("Please wait...");
		switch (rd.charAt(3)){
		//spam
		case 'm':
			try{
				oos=new ObjectOutputStream(new FileOutputStream(globalClass.dump_spam,true));
				list<messageInput> tempSp=null;
				messageInput tempo=null;
				for (int i=0;i<globalClass.hashOfMessageInput.getSize();i++){
					tempSp=globalClass.hashOfMessageInput.getList(i);
					for (int k=0;k<tempSp.getSize();i++){
						tempo=tempSp.getIt(k);
						oos.writeObject(tempo);
						tempo=null;
					}
					tempSp=null;
				}
				globalClass.hashOfMessageInput=null;
				System.out.println("Please wait for garbage collection...");
				tempSp=null;
				globalClass.hashOfMessageInput=new hash<messageInput>(new messageInput());
				dumpSpam=true;
				while((Runtime.getRuntime().freeMemory()/1048576)>15)
					Runtime.getRuntime().gc();
			}
			catch(FileNotFoundException e){
				System.out.println("An error has occured..");
				System.exit(0);
			}
			catch(IOException e){
				System.out.println("An error has occured..");
				System.exit(0);
			}
			break;
		//smtpd
		case 'p':
			try{
				oos=new ObjectOutputStream(new FileOutputStream(globalClass.dump_smtpd,true));
				list<smtpdInput> tempSm=null;
				smtpdInput tempoSm=null;
				for (int i=0;i<globalClass.hashOfSmtpdInputs.getSize();i++){
					tempSm=globalClass.hashOfSmtpdInputs.getList(i);
					for (int k=0;k<tempSm.getSize();k++){
						tempoSm=tempSm.getIt(k);
						oos.writeObject(tempoSm);
						tempoSm=null;
					}
					tempSm=null;
				}
				globalClass.hashOfSmtpdInputs=null;
				globalClass.hashOfSmtpdInputs=new hash<smtpdInput>(new smtpdInput());
				dumpSmtpd=true;
				System.out.println("Please wait for garbage collection...");
				while((Runtime.getRuntime().freeMemory()/1048576)>15)
					Runtime.getRuntime().gc();
			}
			catch(FileNotFoundException e){
				System.out.println("An error has occured..");
				System.exit(0);
			}
			catch(IOException e){
				System.out.println("An error has occured..");
				System.exit(0);
			}
			break;
		//qmail
		case 'i':
			try{
				oos=new ObjectOutputStream(new FileOutputStream(globalClass.dump_qmail,true));
				list<messageOutput> tempSo=null;
				messageOutput tempMo=null;
				for (int i=0;i<globalClass.hashOfMessageOutput.getSize();i++){
					tempSo=globalClass.hashOfMessageOutput.getList(i);
					for (int k=0;k<tempSo.getSize();k++){
						tempMo=tempSo.getIt(k);
						oos.writeObject(tempMo);
						tempMo=null;
					}
					tempSo=null;
				}
				globalClass.hashOfMessageOutput=null;
				globalClass.hashOfMessageOutput=new hash<messageOutput>(new messageOutput());
				tempSo=null;
				dumpQmail=true;
				System.out.println("Please wait for garbage collection...");
				while((Runtime.getRuntime().freeMemory()/1048576)>15)
					Runtime.getRuntime().gc();
			}
			catch(FileNotFoundException e){
				System.out.println("An error has occured..");
				System.exit(0);
			}
			catch(IOException e){
				System.out.println("An error has occured..");
				System.exit(0);
			}
			break;
		}
	}
	public void writeError(long a,String b,boolean t){ //b contains reader name
		if (!t){ 
			errWriter.println("Error in log <"+b+"> @ line #"+a);
			errcntr++;
		}
		if (t){
			double errper=((double)errcntr/linecntr)*100;
			errWriter.println();
			errWriter.println("---------------------------------");
			errWriter.println("SUMMARY <"+b+">");
			errWriter.println("---------------------------------");
			errWriter.println("Lines read: "+linecntr);
			errWriter.println("Errors found: "+errcntr);
			errWriter.println("Error percentage " + Math.round(errper)+"%");
			errWriter.println("---------------------------------");
			errWriter.println();
		}
	}
public static String convertTimeStamp(String t){
		t="0x".concat(t.substring(9,17));
		int newTime=Integer.decode(t);
		Calendar calendar = Calendar.getInstance();
		int dayOfYear=(int)Math.round(((newTime/86400)%365.2425)+0.5);
		int year=(int)((newTime/31536000)+1970);
		int monthInt=-1;
		calendar.set(Calendar.YEAR, 2010);
        calendar.set(Calendar.DAY_OF_YEAR, dayOfYear);
        String monthString=(calendar.getTime().toString()).split(" ")[1].toLowerCase();
        if(monthString.equals("apr"))monthString="may";
        switch(month.valueOf(monthString)){
	        case january:monthInt=1;
	        	break;
	        case february:monthInt=2;
	        	break;
	        case march:monthInt=3;
	        	break;
	        case april:monthInt=4;
	        	break;
	        case may:monthInt=5;
	        	break;
	        case june:monthInt=6;
	        	break;
	        case july:monthInt=7;
	        	break;
	        case august:monthInt=8;
	        	break;
	        case september:monthInt=9;
	        	break;
	        case october:monthInt=10;
	        	break;
	        case november:monthInt=11;
	        	break;
	        case december:monthInt=12;
	        	break;
	        	
	        }
        int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);
        int hours=(newTime/3600)%24;
        int mins=(newTime/60)%60;
        int sec=newTime%60;
		String newTimeStamp=""+dayOfMonth+"/"+monthInt+"/"+year+"/"+hours+"/"+mins+"/"+sec+"";
		return newTimeStamp;
	}
}
